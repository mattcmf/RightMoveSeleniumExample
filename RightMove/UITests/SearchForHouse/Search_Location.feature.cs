// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RightMove.UITests.SearchForHouse
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SearchForHouse_Location")]
    public partial class SearchForHouse_LocationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Search_Location.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SearchForHouse_Location", "\tIn order to buy a house\r\n\tAs a home buyer with a fixed budget\r\n\tI want to view t" +
                    "he houses for sale that I can afford ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search by Location")]
        [NUnit.Framework.TestCaseAttribute("Milton Keynes", "1,000,000", "No max", "2", "No max", "address", "Ashford Crescent, Milton Keynes", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Daventry", "300,000", "No max", "2", "No max", "address", "Scythe Road, Daventry, Northamptonshire, NN11", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Northampton", "1,000,000", "No max", "2", "No max", "address", "Vyse Road, Boughton, Northampton, Northamptonshire, NN2", new string[0])]
        public virtual void SearchByLocation(string location, string minBudget, string maxBudget, string minBeds, string maxBeds, string listingProperty, string propertyName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search by Location", exampleTags);
#line 7
 this.ScenarioSetup(scenarioInfo);
#line 8
  testRunner.Given(string.Format("I am on the search page for the area {0}", location), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
  testRunner.When(string.Format("I have searched for a house with a \'min\' budget of {0}", minBudget), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
  testRunner.And(string.Format("I have searched for a house with a \'max\' budget of {0}", maxBudget), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
  testRunner.And(string.Format("a min {0} bedrooms and max {1} bedrooms", minBeds, maxBeds), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
  testRunner.And("I select find property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
  testRunner.Then(string.Format("I verify a listing with the {0} : {1} is displayed", listingProperty, propertyName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search by Location-NegativeScenarios")]
        [NUnit.Framework.TestCaseAttribute("Northampton", "1,000,000", "No max", "2", "No max", "address", "Ashford Crescent, Milton Keynes", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Milton Keynes", "300,000", "No max", "2", "No max", "address", "Scythe Road, Daventry, Northamptonshire, NN11", new string[0])]
        [NUnit.Framework.TestCaseAttribute("Daventry", "1,000,000", "No max", "2", "No max", "address", "Vyse Road, Boughton, Northampton, Northamptonshire, NN2", new string[0])]
        public virtual void SearchByLocation_NegativeScenarios(string location, string minBudget, string maxBudget, string minBeds, string maxBeds, string listingProperty, string propertyName, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search by Location-NegativeScenarios", exampleTags);
#line 21
 this.ScenarioSetup(scenarioInfo);
#line 22
  testRunner.Given(string.Format("I am on the search page for the area {0}", location), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 23
  testRunner.When(string.Format("I have searched for a house with a \'min\' budget of {0}", minBudget), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
  testRunner.And(string.Format("I have searched for a house with a \'max\' budget of {0}", maxBudget), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
  testRunner.And(string.Format("a min {0} bedrooms and max {1} bedrooms", minBeds, maxBeds), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
  testRunner.And("I select find property", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
  testRunner.Then(string.Format("I verify a listing with the {0} : {1} is NOT displayed", listingProperty, propertyName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
